// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/BiPwL/quiz-base-api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/BiPwL/quiz-base-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CleanTable mocks base method.
func (m *MockStore) CleanTable(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanTable indicates an expected call of CleanTable.
func (mr *MockStoreMockRecorder) CleanTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanTable", reflect.TypeOf((*MockStore)(nil).CleanTable), arg0, arg1)
}

// CleanTables mocks base method.
func (m *MockStore) CleanTables(arg0 context.Context, arg1 []string) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanTables", arg0, arg1)
	ret0, _ := ret[0].([]error)
	return ret0
}

// CleanTables indicates an expected call of CleanTables.
func (mr *MockStoreMockRecorder) CleanTables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanTables", reflect.TypeOf((*MockStore)(nil).CleanTables), arg0, arg1)
}

// CreateAnswer mocks base method.
func (m *MockStore) CreateAnswer(arg0 context.Context, arg1 db.CreateAnswerParams) (db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswer", arg0, arg1)
	ret0, _ := ret[0].(db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnswer indicates an expected call of CreateAnswer.
func (mr *MockStoreMockRecorder) CreateAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswer", reflect.TypeOf((*MockStore)(nil).CreateAnswer), arg0, arg1)
}

// CreateAnsweredQuestion mocks base method.
func (m *MockStore) CreateAnsweredQuestion(arg0 context.Context, arg1 db.CreateAnsweredQuestionParams) (db.AnsweredQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnsweredQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.AnsweredQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnsweredQuestion indicates an expected call of CreateAnsweredQuestion.
func (mr *MockStoreMockRecorder) CreateAnsweredQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnsweredQuestion", reflect.TypeOf((*MockStore)(nil).CreateAnsweredQuestion), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 db.CreateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateQuestion mocks base method.
func (m *MockStore) CreateQuestion(arg0 context.Context, arg1 db.CreateQuestionParams) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockStoreMockRecorder) CreateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockStore)(nil).CreateQuestion), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAnswer mocks base method.
func (m *MockStore) DeleteAnswer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnswer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnswer indicates an expected call of DeleteAnswer.
func (mr *MockStoreMockRecorder) DeleteAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnswer", reflect.TypeOf((*MockStore)(nil).DeleteAnswer), arg0, arg1)
}

// DeleteAnsweredQuestion mocks base method.
func (m *MockStore) DeleteAnsweredQuestion(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnsweredQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnsweredQuestion indicates an expected call of DeleteAnsweredQuestion.
func (mr *MockStoreMockRecorder) DeleteAnsweredQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnsweredQuestion", reflect.TypeOf((*MockStore)(nil).DeleteAnsweredQuestion), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockStore) DeleteQuestion(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockStoreMockRecorder) DeleteQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockStore)(nil).DeleteQuestion), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAnswer mocks base method.
func (m *MockStore) GetAnswer(arg0 context.Context, arg1 int64) (db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswer", arg0, arg1)
	ret0, _ := ret[0].(db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswer indicates an expected call of GetAnswer.
func (mr *MockStoreMockRecorder) GetAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswer", reflect.TypeOf((*MockStore)(nil).GetAnswer), arg0, arg1)
}

// GetAnsweredQuestion mocks base method.
func (m *MockStore) GetAnsweredQuestion(arg0 context.Context, arg1 int64) (db.AnsweredQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnsweredQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.AnsweredQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnsweredQuestion indicates an expected call of GetAnsweredQuestion.
func (mr *MockStoreMockRecorder) GetAnsweredQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnsweredQuestion", reflect.TypeOf((*MockStore)(nil).GetAnsweredQuestion), arg0, arg1)
}

// GetAnswersCount mocks base method.
func (m *MockStore) GetAnswersCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswersCount indicates an expected call of GetAnswersCount.
func (mr *MockStoreMockRecorder) GetAnswersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswersCount", reflect.TypeOf((*MockStore)(nil).GetAnswersCount), arg0)
}

// GetCategoriesCount mocks base method.
func (m *MockStore) GetCategoriesCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesCount indicates an expected call of GetCategoriesCount.
func (mr *MockStoreMockRecorder) GetCategoriesCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesCount", reflect.TypeOf((*MockStore)(nil).GetCategoriesCount), arg0)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(arg0 context.Context, arg1 string) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), arg0, arg1)
}

// GetCategoryQuestionsCount mocks base method.
func (m *MockStore) GetCategoryQuestionsCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryQuestionsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryQuestionsCount indicates an expected call of GetCategoryQuestionsCount.
func (mr *MockStoreMockRecorder) GetCategoryQuestionsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryQuestionsCount", reflect.TypeOf((*MockStore)(nil).GetCategoryQuestionsCount), arg0, arg1)
}

// GetQuestion mocks base method.
func (m *MockStore) GetQuestion(arg0 context.Context, arg1 int64) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockStoreMockRecorder) GetQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockStore)(nil).GetQuestion), arg0, arg1)
}

// GetQuestionAnswersCount mocks base method.
func (m *MockStore) GetQuestionAnswersCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionAnswersCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionAnswersCount indicates an expected call of GetQuestionAnswersCount.
func (mr *MockStoreMockRecorder) GetQuestionAnswersCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionAnswersCount", reflect.TypeOf((*MockStore)(nil).GetQuestionAnswersCount), arg0, arg1)
}

// GetQuestionsCount mocks base method.
func (m *MockStore) GetQuestionsCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsCount indicates an expected call of GetQuestionsCount.
func (mr *MockStoreMockRecorder) GetQuestionsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsCount", reflect.TypeOf((*MockStore)(nil).GetQuestionsCount), arg0)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserAnsweredQuestionsCount mocks base method.
func (m *MockStore) GetUserAnsweredQuestionsCount(arg0 context.Context, arg1 db.GetUserAnsweredQuestionsCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAnsweredQuestionsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAnsweredQuestionsCount indicates an expected call of GetUserAnsweredQuestionsCount.
func (mr *MockStoreMockRecorder) GetUserAnsweredQuestionsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAnsweredQuestionsCount", reflect.TypeOf((*MockStore)(nil).GetUserAnsweredQuestionsCount), arg0, arg1)
}

// GetUsersCount mocks base method.
func (m *MockStore) GetUsersCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersCount indicates an expected call of GetUsersCount.
func (mr *MockStoreMockRecorder) GetUsersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersCount", reflect.TypeOf((*MockStore)(nil).GetUsersCount), arg0)
}

// ListAnsweredQuestions mocks base method.
func (m *MockStore) ListAnsweredQuestions(arg0 context.Context, arg1 db.ListAnsweredQuestionsParams) ([]db.AnsweredQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnsweredQuestions", arg0, arg1)
	ret0, _ := ret[0].([]db.AnsweredQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnsweredQuestions indicates an expected call of ListAnsweredQuestions.
func (mr *MockStoreMockRecorder) ListAnsweredQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnsweredQuestions", reflect.TypeOf((*MockStore)(nil).ListAnsweredQuestions), arg0, arg1)
}

// ListAnswers mocks base method.
func (m *MockStore) ListAnswers(arg0 context.Context, arg1 db.ListAnswersParams) ([]db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswers", arg0, arg1)
	ret0, _ := ret[0].([]db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswers indicates an expected call of ListAnswers.
func (mr *MockStoreMockRecorder) ListAnswers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswers", reflect.TypeOf((*MockStore)(nil).ListAnswers), arg0, arg1)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(arg0 context.Context, arg1 db.ListCategoriesParams) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), arg0, arg1)
}

// ListCategoryQuestions mocks base method.
func (m *MockStore) ListCategoryQuestions(arg0 context.Context, arg1 db.ListCategoryQuestionsParams) ([]db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategoryQuestions", arg0, arg1)
	ret0, _ := ret[0].([]db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoryQuestions indicates an expected call of ListCategoryQuestions.
func (mr *MockStoreMockRecorder) ListCategoryQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoryQuestions", reflect.TypeOf((*MockStore)(nil).ListCategoryQuestions), arg0, arg1)
}

// ListQuestionAnswers mocks base method.
func (m *MockStore) ListQuestionAnswers(arg0 context.Context, arg1 db.ListQuestionAnswersParams) ([]db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestionAnswers", arg0, arg1)
	ret0, _ := ret[0].([]db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestionAnswers indicates an expected call of ListQuestionAnswers.
func (mr *MockStoreMockRecorder) ListQuestionAnswers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestionAnswers", reflect.TypeOf((*MockStore)(nil).ListQuestionAnswers), arg0, arg1)
}

// ListQuestions mocks base method.
func (m *MockStore) ListQuestions(arg0 context.Context, arg1 db.ListQuestionsParams) ([]db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestions", arg0, arg1)
	ret0, _ := ret[0].([]db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockStoreMockRecorder) ListQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockStore)(nil).ListQuestions), arg0, arg1)
}

// ListUserAnsweredQuestions mocks base method.
func (m *MockStore) ListUserAnsweredQuestions(arg0 context.Context, arg1 db.ListUserAnsweredQuestionsParams) ([]db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAnsweredQuestions", arg0, arg1)
	ret0, _ := ret[0].([]db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAnsweredQuestions indicates an expected call of ListUserAnsweredQuestions.
func (mr *MockStoreMockRecorder) ListUserAnsweredQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAnsweredQuestions", reflect.TypeOf((*MockStore)(nil).ListUserAnsweredQuestions), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// TableExists mocks base method.
func (m *MockStore) TableExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableExists indicates an expected call of TableExists.
func (mr *MockStoreMockRecorder) TableExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExists", reflect.TypeOf((*MockStore)(nil).TableExists), arg0, arg1)
}

// UpdateAnswer mocks base method.
func (m *MockStore) UpdateAnswer(arg0 context.Context, arg1 db.UpdateAnswerParams) (db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswer", arg0, arg1)
	ret0, _ := ret[0].(db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswer indicates an expected call of UpdateAnswer.
func (mr *MockStoreMockRecorder) UpdateAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswer", reflect.TypeOf((*MockStore)(nil).UpdateAnswer), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateQuestion mocks base method.
func (m *MockStore) UpdateQuestion(arg0 context.Context, arg1 db.UpdateQuestionParams) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockStoreMockRecorder) UpdateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockStore)(nil).UpdateQuestion), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
